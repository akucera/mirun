program Knapsack;

methods

method void bruteBag(int pos; int maxWeightLeft; int cost; int best; int actual) {
	if (maxWeightLeft < 0){
		return;
	}
	if (cost > bestCost){
		bestCost = cost;
		for(int i = 0; i < itemsCount; i = i + 1;){
			best = actual;
		}
	}
	if (pos < 0){
		return;
	}
        
	[pos]actual = 1;
	pos = pos - 1;
	maxWeightLeft = maxWeightLeft - [pos]itemsWeight;
	cost = cost + [pos]itemsCost;
	call bruteBag(pos; maxWeightLeft; cost;)               
	[pos]actual = 0;
	pos = pos - 1;
	call bruteBag(pos; maxWeightLeft; cost;)        
};	
sdohtem;

declare
eralced;

string inputfile = "01knap_itemsCount4_maxWeight100.dat";

int itemsCount = call readfileint(inputfile);

array int inputdata (itemsCount * 2) + 2;
call readfileintarr(inputfile; inputdata);

int maxWeight = [1]inputdata;
array int itemsWeight itemsCount;
array int itemsCost itemsCount;

int best = 0;
int actual = 0;

int bestCost = 0;

for (int i = 2; i < call length(inputdata);; i = i + 2;) {
   	[i]itemsWeight = [i]inputdata;
	[i]itemsCost = [i+1]inputdata;
}
call bruteBag(itemsCount; maxWeight; 0; bes; actual)
output = bestCost + "  " + [0]best + "  " + [1]best + "  "  + [2]best + "  "  + [3]best + "newLine";	  	
call writefile(output; outputfile);

margorp;
